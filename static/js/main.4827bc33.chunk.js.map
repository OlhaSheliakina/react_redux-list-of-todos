{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","utils/getVisibleTodos.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialSatate","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","visibleTodos","useMemo","preparedTodos","normalizedQuery","toLowerCase","trim","title","includes","completed","getVisibleTodos","length","className","map","id","classNames","onClick","currentTodoActions","setSelectedTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","isLoading","children","TodoModal","useState","user","setUser","useEffect","userId","href","email","name","App","loading","setLoading","setTodos","todosActions","catch","error","Error","message","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA0BrCE,EAbY,WAAiD,IAAhDC,EAA+C,uDAAhC,KAAMC,EAA0B,uCACzE,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OCLPE,EAA6B,CACjCC,MAAO,GACPC,OAAQ,OAuBGT,EAxCI,SAACQ,GAAD,MAAoC,CACnDN,KAAM,mBACNC,QAASK,IAsCER,EAnCM,SAACS,GAAD,MAAsC,CACvDP,KAAM,oBACNC,QAASM,IAmCIC,EAtBO,WAGH,IAFjBL,EAEgB,uDAFRE,EACRD,EACgB,uCAChB,OAAQA,EAAOJ,MACb,IAAK,mBACH,OAAO,2BACFG,GADL,IAEEG,MAAOF,EAAOH,UAElB,IAAK,oBACH,OAAO,2BACFE,GADL,IAEEI,OAAQH,EAAOH,UAEnB,QACE,OAAOE,ICtCAL,EALI,SAACW,GAAD,MAAoC,CACnDT,KAAM,YACNC,QAASQ,IAcIC,EATM,WAAyD,IAAxDD,EAAuD,uDAAvC,GAAIL,EAAmC,uCAC3E,MACO,cADCA,EAAOJ,KAEJI,EAAOH,QAEPQ,GCXPE,EAAcC,0BAAgB,CAClCC,YAAaX,EACbY,OAAQN,EACRC,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,6CCfPC,EAAoCC,IACpCC,EAAkDC,I,eCKlDC,EAAqB,WAChC,IAAMf,EAAQa,GAAe,SAACnB,GAAD,OAAWA,EAAMM,SACxCgB,EAAeH,GAAe,SAACnB,GAAD,OAAWA,EAAMU,eACrD,EAA0BS,GAAe,SAACnB,GAAD,OAAWA,EAAMW,UAAlDP,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,MACVoB,EAAWL,cAEXM,EAAeC,mBAAQ,WAC3B,OCb2B,SAC7BnB,EACAH,EACAC,GAEA,IAAIsB,EAAa,YAAOpB,GAClBqB,EAAkBxB,EAAMyB,cAAcC,OAO5C,OALI1B,IACFuB,EAAgBA,EACbf,QAAO,SAAAf,GAAI,OAAIA,EAAKkC,MAAMF,cAAcG,SAASJ,OAG9CvB,GACN,IAAK,MACL,QACE,OAAOsB,EAET,IAAK,YACH,OAAOA,EAAcf,QAAO,SAAAf,GAAI,OAAIA,EAAKoC,aAE3C,IAAK,SACH,OAAON,EAAcf,QAAO,SAAAf,GAAI,OAAKA,EAAKoC,cDTrCC,CAAgB3B,EAAOH,EAAOC,KACpC,CAACE,EAAOH,EAAOC,IAMlB,OACE,mCAC2B,IAAxBoB,EAAaU,OACZ,mBAAGC,UAAU,0BAAb,iEAIA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIH7B,EAAM4B,OAAS,GACd,gCACGV,EAAaY,KAAI,SAACxC,GAAD,OAChB,qBAAkB,UAAQ,OAA1B,UACE,oBAAIuC,UAAU,eAAd,SAA8BvC,EAAKyC,KACnC,oBAAIF,UAAU,eAAd,SACGvC,EAAKoC,WACJ,sBAAMG,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWG,IAAW,CACpB,mBAAoB1C,EAAKoC,UACzB,mBAAoBpC,EAAKoC,YAH7B,SAMGpC,EAAKkC,UAIV,oBAAIK,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVtC,KAAK,SACL0C,QAAS,kBAxDL,SAAC3C,GACvB2B,EAASiB,EAA2B5C,IAuDH6C,CAAgB7C,IAJjC,SAME,sBAAMuC,UAAU,OAAhB,SACE,mBACEA,UAAWG,IAAW,MAAO,CAC3B,gBAA4B,OAAZhB,QAAY,IAAZA,OAAA,EAAAA,EAAce,MAAOzC,EAAKyC,GAC1C,UAAsB,OAAZf,QAAY,IAAZA,OAAA,EAAAA,EAAce,MAAOzC,EAAKyC,eAhCvCzC,EAAKyC,eE5CjBK,EAAuB,WAClC,MAA0BvB,GAAe,SAACnB,GAAD,OAAWA,EAAMW,UAAlDR,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACTmB,EAAWN,IAcjB,OACE,uBACEkB,UAAU,mBACVQ,SAAU,SAACC,GAAD,OAAWA,EAAMC,kBAF7B,UAIE,mBAAGV,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRW,MAAO1C,EACP2C,SAdiB,SAACH,GAC1BrB,EAASyB,EAAyBJ,EAAMK,OAAOH,SAUzC,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGX,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRtC,KAAK,OACLsC,UAAU,QACVe,YAAY,YACZJ,MAAO3C,EACP4C,SAtCkB,SAACH,GACzBrB,EAASyB,EAAuBJ,EAAMK,OAAOH,WAuCzC,sBAAMX,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdhC,GACC,sBAAMgC,UAAU,gBAAgBgB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRvD,KAAK,SACLsC,UAAU,SACVI,QA/CO,WACjBhB,EAASyB,EAAuB,iBCFpC,SAASK,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,U,MAGd,ICbMC,EAA0B,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SACnD,OAAID,EAEA,qBAAK9B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,sBAKd,mCAAG+B,KCVCC,EAAsB,WACjC,IAAMvE,EAAOuB,GAAe,SAACnB,GAAD,OAAWA,EAAMU,eACvCa,EAAWN,IACjB,EAAwBmD,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAUA,OANAC,qBAAU,WFSW,IAACC,EERpB,OAAI5E,QAAJ,IAAIA,KAAM4E,SFQUA,EEPV5E,EAAK4E,OFOwBnB,EAAG,iBAAiBmB,KEPpCZ,KAAKU,KAE3B,IAGD,mCACE,sBAAKnC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEf,cAAC,EAAD,CAAQ8B,WAAYI,EAApB,SACE,sBAAKlC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,0BAKGvC,QALH,IAKGA,OALH,EAKGA,EAAMyC,MAIT,wBACExC,KAAK,SACLsC,UAAU,SACV,UAAQ,cACRI,QA7BI,kBAAMhB,EAASiB,WAiCvB,sBAAKL,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGvC,QADH,IACGA,OADH,EACGA,EAAMkC,QAGT,oBAAGK,UAAU,QAAQ,UAAQ,aAA7B,UACO,OAAJvC,QAAI,IAAJA,KAAMoC,UACL,wBAAQG,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAED,OACD,mBAAGsC,KAAI,wBAAYJ,QAAZ,IAAYA,OAAZ,EAAYA,EAAMK,OAAzB,gBAAmCL,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMM,wBC3C5CC,EAAgB,WAC3B,MAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACMxD,EAAeH,GAAe,SAACnB,GAAD,OAAWA,EAAMU,eAC/Ca,EAAWN,IAEX8D,EAAW,SAACzE,GAChBiB,EAASyD,EAAsB1E,KAcjC,OAXAiE,qBAAU,WACRO,GAAW,GHHezB,EAAY,UGMnCO,KAAKmB,GACLE,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAMD,EAAME,YAEvBC,SAAQ,kBAAMP,GAAW,QAC3B,IAGD,qCACE,qBAAK3C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CAAQ8B,UAAWY,EAAnB,SACE,cAAC,EAAD,eAOTvD,GAAgB,cAAC,EAAD,QC7CjBgE,EAAO,kBACX,cAAC,IAAD,CAAU1E,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKN2E,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.4827bc33.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (state: State = null, action: Action): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype FilterAction = SetQueryAction | SetStatusAction;\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStataus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype FilterState = {\n  query: string;\n  status: Status;\n};\n\nconst initialSatate: FilterState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state = initialSatate,\n  action: FilterAction,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setQuery, setStataus };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { getVisibleTodos } from '../../utils/getVisibleTodos';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector((state) => state.todos);\n  const selectedTodo = useAppSelector((state) => state.currentTodo);\n  const { status, query } = useAppSelector((state) => state.filter);\n  const dispatch = useDispatch();\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, query, status);\n  }, [todos, query, status]);\n\n  const setSelectedTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {visibleTodos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          {todos.length > 0 && (\n            <tbody>\n              {visibleTodos.map((todo) => (\n                <tr key={todo.id} data-cy=\"todo\">\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-danger': !todo.completed,\n                        'has-text-success': todo.completed,\n                      })}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setSelectedTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye-slash': selectedTodo?.id === todo.id,\n                            'fa-eye': selectedTodo?.id !== todo.id,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          )}\n        </table>\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  query: string,\n  status: Status,\n) => {\n  let preparedTodos = [...todos];\n  const normalizedQuery = query.toLowerCase().trim();\n\n  if (query) {\n    preparedTodos = preparedTodos\n      .filter(todo => todo.title.toLowerCase().includes(normalizedQuery));\n  }\n\n  switch (status) {\n    case 'all':\n    default:\n      return preparedTodos;\n\n    case 'completed':\n      return preparedTodos.filter(todo => todo.completed);\n\n    case 'active':\n      return preparedTodos.filter(todo => !todo.completed);\n  }\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector((state) => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const resetQuery = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStataus(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\ntype Props = {\n  isLoading: boolean;\n  children: React.ReactNode;\n};\n\nexport const Loader: React.FC<Props> = ({ isLoading, children }) => {\n  if (isLoading) {\n    return (\n      <div className=\"Loader\" data-cy=\"loader\">\n        <div className=\"Loader__content\" />\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const todo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n\n  const closeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    if (todo?.userId) {\n      getUser(todo.userId).then(setUser);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        <Loader isLoading={!user}>\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #\n                {todo?.id}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo?.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        </Loader>\n      </div>\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const selectedTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const setTodos = (todos: Todo[]) => {\n    dispatch(todosActions.setTodos(todos));\n  };\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch(error => {\n        throw new Error(error.message);\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <Loader isLoading={loading}>\n                <TodoList />\n              </Loader>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}